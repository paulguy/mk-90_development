    ; Some code and ideas taken from
    ; https://github.com/vladkorotnev/SMPEmu/blob/master/pdp/pdpfw.mac  and
    ; https://github.com/azya52/MK90/blob/master/TRex/trex.mac

	.ENABL AMA 	; Absolute addressing
	.ASECT		; Absolute section
    .RADIX 10

PLAYER_STARTX = SCREEN_MAP_W-5
PLAYER_STARTY = 3 ; from the right

	.= 0		; Beginning of cartridge
    nop ; seems to be needed
    br loader

    .= 32 ; a bunch of interrupt vectors seem to be before here
scratch: ; this can be used as memory after things are loaded

    arg = scratch ; 162 bytes from here until the keyboard interrupt vector
    ; use as scratch space since the loader is not needed after initial bootup

	;	----------------------------------
	;	 OS Procedures and Vars
	;	----------------------------------

    PRINTATTRS = ^O34072
    PRINTNUM = ^O153360 ; arg. r3
    PRINT = ^O153414 ; arg. r1
    INITRAM = ^O153700
    INITTTY = ^O120536
    LCDINA = ^O164000
    LCDINB = ^O164002
    WAITCOMM = ^O174506
    SMPCMD = ^O164026
    SMPBAUD = ^O164022
    SMPCS = ^O164024
    SMPIO = ^O164020
    GETCH = ^O131120
    PUTCH = ^O116542

    BOOTBLOCK_SIZE = 510 ; you'd think it'd be 512 but I guess not?

    SCREEN_WIDTH_B = 30
    SCREEN_WIDTH_W = SCREEN_WIDTH_B/2
    SCREEN_SIZE_B = 960
    SCREEN_SIZE_W = SCREEN_SIZE_B/2
    SCREEN_HEIGHT = 64
    SCREEN_WIDTH = 120

    ; add some scrollable region
    SCREEN_EXTRA_ROWS = 7
    SCREEN_EXTRA_MEM = SCREEN_EXTRA_ROWS*SCREEN_WIDTH_B
    SCREEN_PAGE = SCREEN_SIZE_B+SCREEN_EXTRA_MEM

    KEY_UP = 59
    KEY_DOWN = 63

; ########################################
; ##### Loader                       #####
; ########################################

loader:
	mov #endOfProgram, r4
	mov	#endOfRAM-endOfProgram, r3
loaderClearScreenLoop:
	clr	(r4)+
	sob	r3, loaderClearScreenLoop

    mov #16384, sp

	mov	#screen0, @#LCDINA
	mov #^B1000100011000110, @#LCDINB	;26Hz

	;Loader copyed from Game of Life app of Piotr Piatek
    ;Which I copied again from the T-Rex game
	; specify the SMP address
	mtps #^O340		;disable interrupts
	bis	#8, r5		;writing to the SMP
	mov	r5,(r1)
	mov	#^O240, @#SMPCMD	;Write Address
	jsr	pc,(r2)
	movb #BOOTBLOCK_SIZE/256, @#SMPIO	;high address byte
	jsr	pc,(r2)
	movb #BOOTBLOCK_SIZE&255, @#SMPIO	;low address byte
	jsr	pc, (r2)
	tst	@#SMPCMD
	jsr	pc, (r2)
	; load data
	mov	#endOfProgram-BOOTBLOCK_SIZE, r4		;number of bytes
	mov	#BOOTBLOCK_SIZE, r3
	mov	#^O320, @#SMPCMD	;Read Postincrement
	jsr	pc, (r2)
	bic	#8, r5		;reading from the SMP
	mov	r5, (r1)
	jsr	pc, (r2)
nxtb:	
	movb @#SMPIO, (r3)+	;read data byte from the SMP to the RAM
	jsr	pc, (r2)
	sob	r4, nxtb		;next data byte
	tst	@#SMPCMD
	jsr	pc, (r2)
	; start the loaded program
	mov	#^O000, -(sp)	;user mode, interrupts enable
	mov	#start, -(sp)
	rti

    .blkb 14 ; push the keyboard interrupt vector as far to the end as possible

; ########################################
; ##### Utilities                    #####
; ########################################

keyIntHandle:
    mtps #^O340
    mov r0, -(sp)
    mov r1, -(sp)

    ;jsr pc, getRandom

    mov #SMPBAUD, r1
    mov #8, (r1)+ ;@#SMPBAUD
    mov r1, r0
    mov #^B11100010, (r1)+ ;@#SMPCS
    clr (r1);@#SMPCMD
waitGetKey:
    tstb (r0) ;@#SMPCS
    bpl waitGetKey
    mov (r1), @#inkey

    mov (sp)+, r1
    mov (sp)+, r0
    rti

    .= 200 ; Location of KBCU IV
    .word	keyIntHandle, 0000

getRandom:
    ; put random value in r1 (low bits for div go in r1)

    mov r0, -(sp)
    mov @#randomSeed, r1
    mov r1, r0
    ash #7, r0
    xor r0, r1
    mov r1, r0
    ash #-9, r0
    xor r0, r1
    mov r1, r0
    ash #8, r0
    xor r0, r1
    mov r1, @#randomSeed
    mov (sp)+, r0
    rts pc

; ########################################
; ##### Bitmap Drawing               #####
; ########################################

drawBitmap:
    ; Draw a bitmap to the screen
    bcopy_data = arg ; pointer to data
    bcopy_h = arg+2 ; height in lines
    bcopy_x = arg+4 ; X position
    bcopy_y = arg+6 ; Y position
    bcopy_remaining_rows = scratch+8
    bcopy_remaining_columns = scratch+10
    bcopy_screen_pointer = scratch+12
    bcopy_temp = scratch+14
    bcopy_split_rows = scratch+16
    bcopy_orig_data = scratch+18
    bcopy_sp = scratch+20

    ; TODO: clip sprites that go offscreen
    ; Possible size optimization if needed: runtime modify the swab r5 lines
    ; with nop or swab r5 depending on whether top or bottom is being drawn
    ; to to save space on mostly repetitive code.

    ; figure out if the bitmap starts on the top or bottom of the screen split
    mov @#bcopy_y, r0
    cmp r0, #SCREEN_HEIGHT/2
    bge bitmapStartsBottom

; bitmap starts at top
    ; figure out if the sprite crosses the split and by how much
    add @#bcopy_h, r0
    sub #SCREEN_HEIGHT/2, r0
    bgt bitmapCrossesSplit

; bitmap is entirely on top
    mov @#bcopy_h, r1 ; get the full height of the sprite

    ; do bitmap copy for top of screen (low bits)
    jsr pc, copyBitmapTop

    rts pc

bitmapCrossesSplit:
    mov @#bcopy_h, r1
    sub r0, r1 ; r0 will have the number of lines over the split
    mov r0, @#bcopy_h ; save remaining since we don't need the old value, so r0 can be used
    mov r1, @#bcopy_split_rows
    mov @#bcopy_data, @#bcopy_orig_data

    ; do bitmap copy for top of screen
    jsr pc, copyBitmapTop

    add @#bcopy_split_rows, @#bcopy_orig_data
    mov @#bcopy_orig_data, @#bcopy_data
    mov #SCREEN_HEIGHT/2, @#bcopy_y ; continue from split

bitmapStartsBottom:
    mov @#bcopy_h, r1 ; get/restore remaining lines
    sub #SCREEN_HEIGHT/2, @#bcopy_y ; bottom half of the screen is high bytes of the same memory space

    ; do bitmap copy for bottom of screen (high bits)
    jsr pc, copyBitmapBottom

    rts pc

copyBitmapTop:
    ; r1 - height to copy
    
    ; save r1 because it'll be used with sob
    mov r1, @#bcopy_remaining_rows

    ; calculate pointer to first screen byte
    mov @#bcopy_y, r3
    mul #SCREEN_WIDTH_B, r3 ; r2 doesn't work?  use r3
    add @#scrptr, r3

    mtps #^B11100000 ; avoid SP being used
    mov sp, @#bcopy_sp
    mov r3, sp ; SP can't have the 1 bit set but the screen pointer shouldn't need it?

    mov @#bcopy_x, r2 ; get X offset and convert it to a byte offset by chopping off 3 bits
    ash #-3, r2
    asl r2 ; each 8 pixels on screen is 1 word apart
    add r2, sp ; add X offset to screen start pointer

    mov sp, @#bcopy_screen_pointer ; save the screen pointer too

    mov @#bcopy_data, r0 ; get first pointer to bitmap

    mov @#bcopy_x, r2 ; get how shifted right the value is by keeping the low 3 bits
    bic #^B1111111111111000, r2

    beq centerStripSimpleLoopTopStart ; take simple path if aligned

    neg r2 ; ash shifts right for negatives

    ; get a bit mask to clear from the screen word
    mov #^B0000000011111111, r5
    ash r2, r5 ; shift right

leftStripLoopTop:
    movb (r0)+, r4 ; get bitmap byte
    bic #^B1111111100000000, r4 ; clear high bits so asr doesn't sign-extend
    ash r2, r4
    
    mov (sp), r3 ; get screen word

    bicb r5, r3 ; clear bits
    bisb r4, r3 ; set bitmap bits in to screen word

    mov r3, (sp) ; write back to screen

    add #SCREEN_WIDTH_B, sp ; next screen row
    sob r1, leftStripLoopTop

    mov @#bcopy_data, r0 ; restore bitmap pointer in to r0

    add #2, @#bcopy_screen_pointer ; next screen column
    mov @#bcopy_screen_pointer, sp ; restore screen pointer

    mov @#bcopy_remaining_rows, r1 ; restore height

    add #8, r2 ; switch back to left shift
    com r5 ; get leftside mask

rightStripLoopTop:
    movb (r0)+, r4 ; get bitmap byte
    ash r2, r4 ; shift byte left, ash ignores high bits?
    bic #^B1111111100000000, r4 ; clear high bits

    mov (sp), r3 ; get screen word

    bicb r5, r3 ; clear bits
    bisb r4, r3 ; set bitmap bits in to screen word

    mov r3, (sp) ; write back to screen

    add #SCREEN_WIDTH_B, sp ; update screen pointer
    sob r1, rightStripLoopTop

    mov @#bcopy_sp, sp
    mtps #^B00000000
    rts pc

centerStripSimpleLoopTopStart:
    mov #^B0000000011111111, r5
    mov #SCREEN_WIDTH_B, r2
centerStripSimpleLoopTop:
    movb (r0)+, r4 ; get bitmap byte

    mov (sp), r3 ; get screen word

    bic r5, r3 ; clear low bits
    bisb r4, r3 ; write bitmap in to screen word

    mov r3, (sp) ; write word back to screen

    add r2, sp ; next screen row
    sob r1, centerStripSimpleLoopTop

    mov @#bcopy_sp, sp
    mtps #^B00000000
    rts pc

copyBitmapBottom:
    ; r1 - height to copy
    
    ; save r1 because it'll be used with sob
    mov r1, @#bcopy_remaining_rows

    ; calculate pointer to first screen byte
    mov @#bcopy_y, r3
    mul #SCREEN_WIDTH_B, r3 ; r2 doesn't work?  use r3
    add @#scrptr, r3

    mtps #^B11100000 ; avoid SP being used
    mov sp, @#bcopy_sp
    mov r3, sp ; SP can't have the 1 bit set but the screen pointer shouldn't need it?

    mov @#bcopy_x, r2 ; get X offset and convert it to a byte offset by chopping off 3 bits
    ash #-3, r2
    asl r2 ; each 8 pixels on screen is 1 word apart
    add r2, sp ; add X offset to screen start pointer

    mov sp, @#bcopy_screen_pointer ; save the screen pointer too

    mov @#bcopy_data, r0 ; get first pointer to bitmap

    mov @#bcopy_x, r2 ; get how shifted right the value is by keeping the low 3 bits
    bic #^B1111111111111000, r2

    beq centerStripSimpleLoopBottomStart ; take simple path if aligned

    neg r2 ; ash shifts right for negatives

    ; get a bit mask to clear from the screen word
    mov #^B0000000011111111, r5
    ash r2, r5 ; shift right

leftStripLoopBottom:
    movb (r0)+, r4 ; get bitmap byte
    bic #^B1111111100000000, r4 ; clear high bits so asr doesn't sign-extend
    ash r2, r4
    
    mov (sp), r3 ; get screen word
    swab r3

    bicb r5, r3 ; clear bits
    bisb r4, r3 ; set bitmap bits in to screen word

    swab r3
    mov r3, (sp) ; write back to screen

    add #SCREEN_WIDTH_B, sp ; next screen row
    sob r1, leftStripLoopBottom

    mov @#bcopy_data, r0 ; restore bitmap pointer in to r0

    add #2, @#bcopy_screen_pointer ; next screen column
    mov @#bcopy_screen_pointer, sp ; restore screen pointer

    mov @#bcopy_remaining_rows, r1 ; restore height

    add #8, r2 ; switch back to left shift
    com r5 ; get leftside mask

rightStripLoopBottom:
    movb (r0)+, r4 ; get bitmap byte
    ash r2, r4 ; shift byte left, ash ignores high bits?
    bic #^B1111111100000000, r4 ; clear high bits

    mov (sp), r3 ; get screen word
    swab r3

    bicb r5, r3 ; clear bits
    bisb r4, r3 ; set bitmap bits in to screen word

    swab r3
    mov r3, (sp) ; write back to screen

    add #SCREEN_WIDTH_B, sp ; update screen pointer
    sob r1, rightStripLoopBottom

    mov @#bcopy_sp, sp
    mtps #^B00000000
    rts pc

centerStripSimpleLoopBottomStart:
    mov #^B0000000011111111, r5
    mov #SCREEN_WIDTH_B, r2
centerStripSimpleLoopBottom:
    movb (r0)+, r4 ; get bitmap byte

    mov (sp), r3 ; get screen word
    swab r3

    bic r5, r3 ; clear low bits
    bisb r4, r3 ; write bitmap in to screen word

    swab r3
    mov r3, (sp) ; write word back to screen

    add r2, sp ; next screen row
    sob r1, centerStripSimpleLoopBottom

    mov @#bcopy_sp, sp
    mtps #^B00000000
    rts pc

; ########################################
; ##### Tilemap Drawing              #####
; ########################################

drawTilemap:
    tm_scrolly = arg ; Y scroll px, must be 0-7
    tm_yoffset = arg+2 ; Y offset in to buffer
    tm_screen_pointer = scratch+4
    tm_sp = scratch+6
    tm_xpos = scratch+8
    tm_ypos = scratch+10
    tm_row_ptrs = scratch+12 ; 9 words

    mov @#scrptr, r1
    add #SCREEN_SIZE_B-6, r1
    mov r1, @#tm_screen_pointer

    mtps #^B11100000 ; save SP
    mov sp, @#tm_sp

    mov #SCREEN_MAP_W-1, @#tm_xpos ; get the last tile on the screen row

    mov #8, r0 ; start at bottom row
    add @#tm_yoffset, r0 ; add offset
    mov #18, r2 ; + 2 because 0 is skipped
tmPopulatePtrs:
    bic #^B1111111111100000, r0 ; limit from 0-31
    movb tmWrapLookup(r0), r0 ; limit from 0-8
    mov r0, r1
    mul #SCREEN_MAP_W*2, r1 ; get the row
    add #SCREEN_MAP_W-1*2, r1 ; start at last column
    mov r1, tm_row_ptrs-2(r2) ; - 2 because 0 is skipped
    dec r0
    dec r2
    sob r2, tmPopulatePtrs

tmColumnLoop:
    mov @#tm_screen_pointer, sp

    mov #8, r4

    mov #6, @#tm_ypos
    tst @#tm_scrolly
    beq tmNoExtraRow
    add #2, @#tm_ypos
    mov @#tm_scrolly, r4
tmNoExtraRow:

tmTileLoop:
    mov @#tm_ypos, r2
    mov tm_row_ptrs(r2), r3
    mov screenMap(r3), r0 ; index to get pointer to tile data
    add r4, r0 ; start at last line

    add #8, r2
    mov tm_row_ptrs(r2), r3
    mov screenMap(r3), r1
    add r4, r1

    mov #SCREEN_WIDTH_B, r2
    ; r2 is free here, so use it.
    mov #^B1111111100000000, r3
    ; r3 is also free, so use it
tmRowLoop:
    movb -(r1), r5 ; move high byte in to low byte
    bic r3, r5 ; mask sign extension
    swab r5 ; swap high byte high
    bisb -(r0), r5 ; mask value in low
    mov r5, (sp) ; write to screen
    sub r2, sp ; update screen pointer
    sob r4, tmRowLoop

    mov #8, r4 ; reset tile row

    sub #2, @#tm_ypos
    bpl tmTileLoop

    mov #18, r0 ; 16 + 2 because 0 is skipped
tmMovePtrsLeft:
    sub #2, tm_row_ptrs-2(r0) ; - 2 because 0 is skipped
    dec r0
    sob r0, tmMovePtrsLeft

    sub #2, @#tm_screen_pointer ; next left column
    dec @#tm_xpos ; next column
    bpl tmColumnLoop

    mov @#tm_sp, sp ; restore SP
    mtps #^B00000000
    rts pc

tmWrapLookup:
    ; 32 bytes
    .byte 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6
    ; i don't know if it goes negative, but have some values for if it does?
    .byte 7, 8, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7, 8

; ########################################
; ##### Map Generation               #####
; ########################################

    gen_x = arg
    gen_y = arg+2
    gen_x_save = scratch+4
    gen_vals = scratch+6 ; 3 words
    gen_double = scratch+12 ; 3 words
    gen_dir = scratch+18 ; 0 = up, 1 = down
GEN_UP = 0
GEN_DOWN = 1

;TODO Fix floating water
gen_gather:
    ; r0 - not used
    ; r1 - pointer to probabilities
    ; r2 - not used (reserved)
    ; r3 - used (iterations counter)
    ; r4 - used (values pointer)
    ; r5 - used (doubles pointer)

    mov #gen_vals, r4
    mov #gen_double, r5
    mov #3, r3
gen_next_prob:
    tst (r4) ; check if disallowed already
    beq gen_done
    movb (r1), r0
    bne gen_no_Disallow ; test of not 0 (PMOD_DISALLOW)
    clr (r4) ; clear to 0 (disallowed)
    br gen_done ; no more to do
gen_no_Disallow:
    dec r0
    bne gen_no_AddOne ; test if not 1 (PMOD_ADDONE)
    inc (r4)
    br gen_done
gen_no_AddOne:
    dec r0
    bne gen_done ; test if not 2 (PMOD_DOUBLE)
    inc (r5)
gen_done: ; no need to check for PMOD_NOCHANGE, it'll just fall through
    tst (r4)+ ; increment to next word
    tst (r5)+
    inc r1
    sob r3, gen_next_prob

    rts pc

gen:
    gen_init_prob_air = 3
    gen_init_prob_land = 2
    gen_init_prob_water = 2

    ; initial values
    mov #gen_init_prob_air, @#gen_vals
    mov #gen_init_prob_land, @#gen_vals+2
    mov #gen_init_prob_water, @#gen_vals+4
    ; start with no shift
    clr @#gen_double
    clr @#gen_double+2
    clr @#gen_double+4

    mov @#gen_y, r3 ; y * width + x
    mul #SCREEN_MAP_W, r3
    add @#gen_x, r3
    add #collisionMap, r3
    mov r3, r2 ; save pointer

; get left neighbor
    mov #BLOCKTYPE_LAND, r1
    tst @#gen_x ; check if x is 0 so left neighbor would be nothing
    beq gen_leftNothing
    movb -1(r3), r1 ; neighbor to the left
gen_leftNothing:
    movb probability_ptrs(r1), r1
    ; left neighbor will generate probabilities for right neighbors
    add #probabilities_right, r1

    jsr pc, gen_gather

; get right neighbor
    mov r2, r3 ; restore pointer

    mov #BLOCKTYPE_LAND, r1
    ; check if x is the far right so neighbor would be nothing
    cmp @#gen_x, #SCREEN_MAP_W-1
    beq gen_rightNothing
    movb 1(r3), r1 ; neighbor to the right
gen_rightNothing:
    movb probability_ptrs(r1), r1
    ; right neighbor will generate probabilities for left neighbors
    add #probabilities_left, r1

    jsr pc, gen_gather

; get up neighbor
    mov r2, r3 ; restore pointer

    mov #BLOCKTYPE_NOTHING, r1
    tst @#gen_dir
    beq gen_upNothing ; if dir is 0 (up), new tiles will have nothing up neighbors
    tst @#gen_y ; check of y is > 0 to determine if next neighbor up doesn't need to wrap
    bne gen_up_noWrap
    ; if y is 0, r3 will just be the first row offset
    add #SCREEN_MAP_SIZE, r3
gen_up_noWrap:
    movb -SCREEN_MAP_W(r3), r1 ; neighbor up a row
gen_upNothing:
    movb probability_ptrs(r1), r1
    ; up neighbor will generate probabilities for down neighbors
    add #probabilities_down, r1

    jsr pc, gen_gather

; get down neighbor
    mov r2, r3 ; restore pointer

    mov #BLOCKTYPE_NOTHING, r1
    tst @#gen_dir
    bne gen_downNothing ; if dir is non-0 (down), new tiles will have nothing down neighbors
    ; check if y is the far bottom to determine if the pointer should wrap
    cmp @#gen_y, #SCREEN_MAP_H-1
    bne gen_down_noWrap
    ; if y is the map height, make it wrap back around to the top row
    sub #SCREEN_MAP_SIZE, r3
gen_down_noWrap:
    movb SCREEN_MAP_W(r3), r1 ; neighbor down a row
gen_downNothing:
    movb probability_ptrs(r1), r1
    ; down neighbor will generate probabilities for up neighbors
    add #probabilities_up, r1

    jsr pc, gen_gather

    ; do final multiplications
    mov @#gen_vals, r0
    ash @#gen_double, r0
    mov r0, @#gen_vals

    mov @#gen_vals+2, r0
    ash @#gen_double+2, r0
    mov r0, @#gen_vals+2

    mov @#gen_vals+4, r0
    ash @#gen_double+4, r0
    mov r0, @#gen_vals+4

    ; become a list of ranges
    add @#gen_vals, @#gen_vals+2
    add @#gen_vals+2, @#gen_vals+4

    ; get a value from 0 to max range-1
    jsr pc, getRandom
    clr r0
    div @#gen_vals+4, r0 ; remainder will be in r1

    tst @#gen_vals
    beq gen_no_air ; if 0, it has no range
    cmp r1, @#gen_vals
    bge gen_no_air ; if r1 >= value, it's outside of range
    movb #BLOCKTYPE_AIR, (r2) ; otherwise set the tile and end
    br gen_found_block
gen_no_air:
    cmp @#gen_vals, @#gen_vals+2
    beq gen_no_land ; if equal, it has no range
    cmp r1, @#gen_vals+2
    bge gen_no_land
    movb #BLOCKTYPE_LAND, (r2)
    br gen_found_block
gen_no_land:
    cmp @#gen_vals+2, @#gen_vals+4
    beq gen_no_water
    ; I could in theory just flal through and always set it to water, but I
    ; want the error state to be more obvious.
    cmp r1, @#gen_vals+4
    bge gen_no_water
    movb #BLOCKTYPE_WATER, (r2)
gen_no_water:
gen_found_block:

    rts pc

collisionMapToTileMap:
    ; TODO: conditional or random variation tiles
    mov @#gen_y, r1
    mul #SCREEN_MAP_W, r1
    add #collisionMap, r1
    mov r1, r2

    mov @#gen_y, r1
    mul #SCREEN_MAP_W*2, r1
    add #screenMap, r1

    mov #SCREEN_MAP_W, r4
cmap_next_tile:
    movb (r2)+, r3 ; get type
    rol r3 ; bytes to words
    mov tile_ptrs(r3), r3
    mov r3, (r1)+ ; insert in to screen map
    sob r4, cmap_next_tile

    rts pc

genLeft:
    jsr pc, gen
    dec @#gen_x
    bpl genLeft

    rts pc

genRight:
    jsr pc, gen
    inc @#gen_x
    cmp @#gen_x, #SCREEN_MAP_W
    blt genRight

    rts pc

genStrip:
    jsr pc, getRandom
    clr r0 ; clear high bits/negative
    div #SCREEN_MAP_W-2, r0
    ; r1 has the remainder
    inc r1 ; make sure there's space above and below
    mov r1, @#gen_x
    mov r1, @#gen_x_save
    jsr pc, gen
    dec @#gen_x
    jsr pc, genLeft
    mov @#gen_x_save, @#gen_x
    inc @#gen_x
    jsr pc, genRight
    jsr pc, collisionMapToTileMap

    rts pc

genUp:
    mov #GEN_UP, @#gen_dir
genUp_loop:
    jsr pc, genStrip
    dec @#gen_y
    bpl genUp_loop

    rts pc

genDown:
    mov #GEN_DOWN, @#gen_dir
genDown_loop:
    jsr pc, genStrip
    inc @#gen_y
    cmp @#gen_y, #SCREEN_MAP_H
    blt genDown_loop

    rts pc

scrollScreen:
    scrollPX = arg
    ; don't check for 0 to assure reasonably consistent performance by
    ; always redrawing the screen

    mov @#scrollPX, -(sp) ; save because gen routines will clobber args

    mov @#bgY, r1
    mov r1, r0
    add (sp), r0

    ash #-3, r0 ; convert pixels to columns
    movb r0, r0 ; preserve sign (value should never be outside [-128, 127])
    ash #-3, r1
    movb r1, r1
    sub r1, r0 ; get number of new columns to generate
    beq scrollNone ; if 0, no map gen

    mov r1, @#gen_y

    mov #GEN_UP, @#gen_dir
    mov r0, -(sp) ; save number of new columns
    bmi scrollUp ; if negative, scroll up
    mov #GEN_DOWN, @#gen_dir

scrollDown:
    jsr pc, genStrip
    ; current column goes out of view first
    inc @#gen_y
    cmp @#gen_y, #SCREEN_MAP_H
    blt scrollDown_noWrap
    clr @#gen_y
scrollDown_noWrap:
    dec (sp)
    bne scrollDown

    br scrollDone

scrollUp:
    ; next column "up" is in view first
    dec @#gen_y
    bpl scrollUp_noWrap
    mov #SCREEN_MAP_H-1, @#gen_y
scrollUp_noWrap:
    jsr pc, genStrip
    inc (sp)
    bne scrollUp

scrollDone:
    tst (sp)+ ; restore SP
scrollNone:
    mov (sp)+, r1 ; get back scroll amount
    add @#bgY, r1 ; add current scroll amount
    sxt r0 ; make high bits negative if negative
    div #SCREEN_MAP_H_PX, r0 ; divide to get modulo map size
    tst r1
    bpl scrollVarUpdate_noWrap
    add #SCREEN_MAP_H_PX, r1 ; if negative, wrap it around
scrollVarUpdate_noWrap:
    mov r1, @#bgY ; store new value back

    mov @#bgY, @#tm_scrolly
    bic #^B1111111111111000, @#tm_scrolly
    mov @#bgY, r0
    ash #-3, r0
    bic #^B1111111111110000, r0
    mov r0, @#tm_yoffset
    jsr pc, drawTilemap

    rts pc

PLAYER_ACCEL = 96
PLAYER_MAX_SPEED = 256 ; 1 tile length
updatePlayerMovement:
    ; get player acceleration then take the sign from the player's y direction
    clr r0
    mov @#playerYDir, r1
    mov r1, @#screen0
    beq pmove_no_accel
    mov #PLAYER_ACCEL, r0
    tst r1
    sxt r1
    ; this'll make it either N or -(n-1) but whichever
    xor r1, r0
pmove_no_accel:
    mov r0, @#SCREEN_WIDTH_B+screen0

    ; update player Y speed and clamp to 8 bit signed
    mov @#playerYSpeed, r1
    add r0, r1
    cmp r1, #PLAYER_MAX_SPEED
    ble pmove_no_max_y_speed
    mov #PLAYER_MAX_SPEED, r1
    br pmove_no_min_y_speed
pmove_no_max_y_speed:
    cmp r1, #-PLAYER_MAX_SPEED
    bge pmove_no_min_y_speed
    mov #-PLAYER_MAX_SPEED, r1
pmove_no_min_y_speed:
    mov r1, @#SCREEN_WIDTH_B*2+screen0
    ; update player position
    movb @#playerY, r0
    add r1, r0
    movb r0, @#playerY ; store back low byte (tile-local)

    ; scroll the map by player speed
    mov r1, r0
    mov r1, r2
    bic #^B0000011111111111, r2
    ash #-5, r0 ; pos to pixels
    bis r2, r0
    mov r0, @#scrollPX

    mov r1, r0
    bic #^B0001111111111111, r0 ; save sign
    mov r1, r2 ; get quarter speed
    ash #-3, r2
    bis r0, r2 ; restore sign
    sub r2, r1 ; subtract quarter speed
    mov r1, r2 ; get absolute value-ish
    sxt r0
    xor r0, r2
    ; check of least significant bits are too few to subtract
    bit #^B1111111111111000, r2
    bne pmove_no_smallest_y_speed
    clr r1
pmove_no_smallest_y_speed:
    mov r1, @#playerYSpeed ; store it back

    rts pc

; ########################################
; ##### Start                        #####
; ########################################

start:
    mov #12345, @#randomSeed

; clear everything
    mov #screenMapEnd-screenMap+2, r0
clearScreenMap:
    mov #t_none, screenMap-2(r0)
    dec r0
    sob r0, clearScreenMap

    mov #collisionMapEnd-collisionMap+2, r0
clearCollisionMap:
    mov #0, collisionMap-2(r0)
    dec r0
    sob r0, clearCollisionMap

    ; starting platform
    movb #BLOCKTYPE_AIR, @#SCREEN_MAP_W*PLAYER_STARTY+PLAYER_STARTX+collisionMap
    movb #BLOCKTYPE_LAND, @#SCREEN_MAP_W*PLAYER_STARTY+PLAYER_STARTX+collisionMap+1

    mov #PLAYER_STARTY, @#gen_y

    mov #PLAYER_STARTX-1, @#gen_x
    jsr pc, genLeft

    mov #PLAYER_STARTX+2, @#gen_x
    jsr pc, genRight

    jsr pc, collisionMapToTileMap

    mov #PLAYER_STARTY-1, @#gen_y
    jsr pc, genUp

    mov #PLAYER_STARTY+1, @#gen_y
    jsr pc, genDown

    mov #PLAYER_STARTX*POS_PER_TILE, @#playerX
    ; Center player in tile
    mov #TILE_H-plsprite_H/2*PX_PER_POS, @#playerY
    clr @#playerXSpeed
    clr @#playerYSpeed

    mov #4, bgY ; start centered
    mov #screen0, @#LCDINA
    mov #screen1, @#scrptr
    mov #screen0, @#scrptr ; for when flipping disabled

loop:
    clr @#playerXDir
    clr @#playerYDir

    cmp @#inkey, #KEY_UP
    beq moveRight
    cmp @#inkey, #KEY_DOWN
    beq moveLeft
    br latMoveDone
moveRight:
    dec @#playerYDir
    clr @#inkey
    br latMoveDone
moveLeft:
    inc @#playerYDir
    clr @#inkey
latMoveDone:

    jsr pc, updatePlayerMovement

    jsr pc, scrollScreen

    mov #plsprite, @#bcopy_data
    mov #plsprite_H, @#bcopy_h
    mov @#playerX, r0
    ; convert X position to pixel position
    ; 1 tile contains 256 possible positions on any axis
    ; 8 pixels per tile -> 32 positions per pixel, must trim 5 bits
    ash #-5, r0
    add #8, r0 ; offset for top status bar
    mov r0, @#bcopy_x
    ; center player sprite on screen
    mov #SCREEN_HEIGHT-plsprite_H/2, @#bcopy_y
    jsr pc, drawbitmap

    br noflipscr1 ; disable flipping
    cmp @#scrptr, #screen0
    beq flipscr1
    mov #screen1, @#LCDINA
	mov	#screen0, @#scrptr
    br noflipscr1
flipscr1:
    mov #screen0, @#LCDINA
	mov	#screen1, @#scrptr
noflipscr1:

    jsr pc, getRandom

    br loop

STRIP_W = 8
plsprite:
    .byte ^B01100000
    .byte ^B10011111
    .byte ^B10011100
    .byte ^B11111100
    .byte ^B11111111
    .byte ^B01111000
plsprite_H = 6

TILE_H = 8
SCREEN_TILES_W = SCREEN_WIDTH/STRIP_W
SCREEN_TILES_H = SCREEN_HEIGHT/TILE_H
t_none:
    .byte ^B00000001
    .byte ^B01000101
    .byte ^B00101001
    .byte ^B00010001
    .byte ^B00101001
    .byte ^B01000101
    .byte ^B00000001
    .byte ^B11111111

t_air:
    .byte ^B00000000
    .byte ^B00000000
    .byte ^B01000000
    .byte ^B00000000
    .byte ^B00000000
    .byte ^B00000100
    .byte ^B00001000
    .byte ^B00000000

t_land:
    .byte ^B11111111
    .byte ^B11111111
    .byte ^B11111111
    .byte ^B11111111
    .byte ^B11111111
    .byte ^B11111111
    .byte ^B11111111
    .byte ^B11111111

t_water:
    .byte ^B00000000
    .byte ^B10000100
    .byte ^B10100100
    .byte ^B00100010
    .byte ^B10000010
    .byte ^B11010000
    .byte ^B11010010
    .byte ^B10000010

tile_ptrs:
    .word t_none
    .word t_air
    .word t_land
    .word t_water

PMOD_DISALLOW = 0
PMOD_ADDONE = 1
PMOD_DOUBLE = 2
PMOD_NOCHANGE = 3
    ; each is in west, east, south, north order
probabilities_start:
probabilities_left:
    ; probability mod for air, land, water
    .byte PMOD_ADDONE, PMOD_ADDONE, PMOD_NOCHANGE
probabilities_right:
    .byte PMOD_ADDONE, PMOD_ADDONE, PMOD_NOCHANGE
probabilities_down:
    .byte PMOD_ADDONE, PMOD_ADDONE, PMOD_NOCHANGE
probabilities_up:
    .byte PMOD_ADDONE, PMOD_ADDONE, PMOD_NOCHANGE
probabilities_air:
    .byte PMOD_DOUBLE, PMOD_NOCHANGE, PMOD_DISALLOW
    .byte PMOD_DOUBLE, PMOD_ADDONE, PMOD_ADDONE
    .byte PMOD_DOUBLE, PMOD_NOCHANGE, PMOD_DISALLOW
    .byte PMOD_DOUBLE, PMOD_NOCHANGE, PMOD_DISALLOW
probabilities_land:
    .byte PMOD_DOUBLE, PMOD_NOCHANGE, PMOD_NOCHANGE
    .byte PMOD_ADDONE, PMOD_DOUBLE, PMOD_NOCHANGE
    .byte PMOD_ADDONE, PMOD_DOUBLE, PMOD_ADDONE
    .byte PMOD_ADDONE, PMOD_DOUBLE, PMOD_ADDONE
probabilities_water:
    .byte PMOD_NOCHANGE, PMOD_NOCHANGE, PMOD_DOUBLE
    .byte PMOD_DISALLOW, PMOD_NOCHANGE, PMOD_DOUBLE
    .byte PMOD_DISALLOW, PMOD_NOCHANGE, PMOD_DOUBLE
    .byte PMOD_DISALLOW, PMOD_NOCHANGE, PMOD_DOUBLE

probability_ptrs:
    .byte 0
    .byte probabilities_air-probabilities_start
    .byte probabilities_land-probabilities_start
    .byte probabilities_water-probabilities_start

.EVEN

endOfProgram: ; must not go beyond 10KB
; This area will be memory values.
; even if these get cut off by the 10KB memory card limit, they'll be initialized elsewhere anyway

; screen width / tile width, 120 / 8 + 1 = 16
; screen height / tile height, 64 / 8 + 1 = 9
SCREEN_MAP_W = 12
SCREEN_MAP_H = SCREEN_TILES_H+1
SCREEN_MAP_SIZE = SCREEN_MAP_W*SCREEN_MAP_H
SCREEN_MAP_H_PX = SCREEN_MAP_H*TILE_H
screenMap:
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
screenMapEnd:

BLOCKTYPE_NOTHING = 0
BLOCKTYPE_AIR = 1
BLOCKTYPE_LAND = 2
BLOCKTYPE_WATER = 3
collisionMap:
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
collisionMapEnd:

; 2 screen pages
screenTop0:
    .blkb SCREEN_EXTRA_MEM
screen0:
    .blkb SCREEN_SIZE_B
screenTop1:
    .blkb SCREEN_EXTRA_MEM
screen1:
    .blkb SCREEN_SIZE_B
scrptr:
    .word 0
inkey:
    .word 0
randomSeed:
    .word 0

; state variables
bgY:
    .word 0

POS_PER_TILE = 256 ; low bit for sub-tile pos
PX_PER_POS = POS_PER_TILE/TILE_H
playerX:
    .word 0
playerY:
    .word 0
playerXDir:
    .byte 0
playerYDir:
    .byte 0
playerXSpeed:
    .word 0
playerYSpeed:
    .word 0

endOfRAM: ; must not go beyond 16KB

; no idea if these work, they don't seem to print anything at least, but i'm probably misunderstanding something.
.IF GT endOfProgram-10240
.ERROR endOfProgram ; Program and data size extends beyond the 10KB SMP ROM size
.IFF
.PRINT endOfProgram ; Program and Data Size
.ENDC

.IF GT endOfRAM-16384
.ERROR endOfRAM ; Program, data and memory space extends beyond the 16KB RAM space
.IFF
.PRINT endOfRAM ; Program, Data and Memory Size
.ENDC
